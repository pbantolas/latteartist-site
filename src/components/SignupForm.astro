---
// src/components/SignupForm.astro
---

<div
	class="bg-card rounded-3xl border border-gray-200 dark:border-gray-700 shadow-xl shadow-black/7 dark:shadow-black/20 w-full box-border flex flex-col items-center p-12"
	id="signup-container"
>
	<h2 class="text-2xl font-medium text-primary text-center mb-4 mt-0">
		Want to Track Your Progress Too? Join the Waitlist ðŸ‘‡
	</h2>
	<!-- EmailOctopus Embedded Form Script -->
	<script
		async
		src="https://eocampaign1.com/form/be5ce5f8-10bd-11f0-8871-7bb29bbe8677.js"
		data-form="be5ce5f8-10bd-11f0-8871-7bb29bbe8677"
		is:inline></script>

	<!-- Static Android Checkbox Container (hidden initially, positioned below form) -->
	<div
		id="android-checkbox-static-container"
		class="hidden w-full max-w-xs self-center mx-auto text-left mt-6 mb-0"
	>
		{/* JS will remove 'hidden' class */}
		<label
			for="android-checkbox"
			class="inline-flex items-center cursor-pointer text-sm text-secondary"
		>
			{/* Standard HTML checkbox */}
			<input
				type="checkbox"
				id="android-checkbox"
				class="form-checkbox h-4 w-4 text-accent bg-card border-gray-200 dark:border-gray-700 rounded mr-2 focus:ring-accent dark:focus:ring-offset-gray-800"
			/>
			Android user? Let me know when it's ready!
		</label>
	</div>
</div>

<!-- Styles moved to Tailwind utility classes or global.css -->

<script>
	// --- Android Checkbox Logic using Standard Input ---
	let androidCheckboxAdded = false; // Flag to prevent multiple additions

	const observerAndroid = new MutationObserver((mutationsList, observer) => {
		// Obtain signupContainer reference INSIDE the callback
		const signupContainer = document.getElementById("signup-container");
		if (!signupContainer) return; // Guard clause

		if (androidCheckboxAdded) {
			// observer.disconnect(); // Optional: stop observing once added
			return;
		}

		// Find the EmailOctopus hidden input and assert its type
		const hiddenInput = signupContainer.querySelector(
			'input#field_3[type="hidden"]'
		) as HTMLInputElement | null; // Assert type
		// Find the EmailOctopus submit input (optional, but good to check if form is fully loaded)
		const submitButton = signupContainer.querySelector(
			'.emailoctopus-form input[type="submit"]'
		);
		// Find the static checkbox container
		const staticCheckboxContainer = document.getElementById(
			"android-checkbox-static-container"
		);
		// Find the new standard checkbox input
		const androidCheckbox = staticCheckboxContainer?.querySelector(
			"#android-checkbox"
		) as HTMLInputElement | null;

		// Check if the form elements AND the static checkbox elements are ready
		if (
			hiddenInput &&
			submitButton &&
			staticCheckboxContainer &&
			androidCheckbox && // Check for the new input
			!androidCheckboxAdded
		) {
			// Make the static container visible by removing the 'hidden' class
			staticCheckboxContainer.classList.remove("hidden");

			// Set initial value for the hidden input
			hiddenInput.value = "no";

			// Add change listener to the standard checkbox input
			androidCheckbox.addEventListener("change", (event) => {
				const isChecked = (event.target as HTMLInputElement).checked;
				// Update hidden input value based on the checkbox's checked state
				hiddenInput.value = isChecked ? "yes" : "no";
			});

			androidCheckboxAdded = true; // Set flag
			// observer.disconnect(); // Optional: Disconnect after adding
		}
	});

	// Start observing the signup container for the EmailOctopus form elements
	// Ensure signupContainer exists in the DOM before calling observe
	const initialSignupContainer = document.getElementById("signup-container");
	if (initialSignupContainer) {
		observerAndroid.observe(initialSignupContainer, {
			childList: true,
			subtree: true,
		});
	} else {
		console.error(
			"Signup container not found for Android checkbox observer."
		);
	}
</script>
