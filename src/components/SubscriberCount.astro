---
// Astro component frontmatter (empty in this case)
---

<style>
    @keyframes shimmer {
        0% {
            background-position: -150% center;
        }
        100% {
            background-position: 150% center;
        }
    }
    .animate-shimmer {
        background: linear-gradient(
            90deg,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.4) 20%,
            rgba(255, 255, 255, 0.4) 80%,
            rgba(255, 255, 255, 0) 100%
        );
        background-size: 150% 100%;
        animation: shimmer 2s infinite linear;
    }
    .dark .animate-shimmer {
        background: linear-gradient(
            90deg,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.15) 20%,
            rgba(255, 255, 255, 0.15) 80%,
            rgba(255, 255, 255, 0) 100%
        );
    }
</style>

<p id="subscriber-text-container" class="italic text-sm text-secondary mb-4">
    Join <span
        class="inline-flex items-center bg-brand-accent/10 dark:bg-brand-accent/20 rounded px-2 py-0.5 relative overflow-hidden"
    >
        <span id="subscriber-count" class="font-bold text-accent"></span>
        <span class="absolute inset-0 animate-shimmer"></span>
    </span> baristas already on the waitlist
</p>

<script>
    const SUBSCRIBER_CACHE_KEY = "subscriberCountCache";
    const CACHE_DURATION_MS = 3600000; // 1 hour
    const ANIMATION_DURATION_MS = 1500;

    function animateCount(targetCount: number, countSpanElement: HTMLElement) {
        const startCount =
            parseInt(countSpanElement.dataset.lastCount || "0") || 0;
        const startTime = performance.now();

        function updateCount(currentTime: number) {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / ANIMATION_DURATION_MS, 1);
            const currentValue = Math.round(
                startCount +
                    (targetCount - startCount) * (1 - Math.pow(1 - progress, 3))
            );
            countSpanElement.textContent = `${currentValue} other`;
            countSpanElement.dataset.lastCount = currentValue.toString();

            if (progress < 1) {
                requestAnimationFrame(updateCount);
            }
        }

        requestAnimationFrame(updateCount);
    }

    async function loadCount() {
        const countSpan = document.getElementById("subscriber-count");
        if (!countSpan) return;

        // Check cache first
        const cachedData = localStorage.getItem(SUBSCRIBER_CACHE_KEY);
        if (cachedData) {
            try {
                const { count, timestamp } = JSON.parse(cachedData);
                if (Date.now() - timestamp < CACHE_DURATION_MS) {
                    countSpan.textContent = `... other`;
                    animateCount(count, countSpan as HTMLElement);
                    return;
                }
            } catch (e) {
                console.error("Error parsing cached data:", e);
            }
        }

        try {
            const res = await fetch("/.netlify/functions/get-subscriber-count");
            if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
            const { subscriberCount } = await res.json();

            // Store in cache
            localStorage.setItem(
                SUBSCRIBER_CACHE_KEY,
                JSON.stringify({
                    count: subscriberCount,
                    timestamp: Date.now(),
                })
            );

            countSpan.textContent = `... other`;
            animateCount(subscriberCount, countSpan as HTMLElement);

            const container = document.getElementById(
                "subscriber-text-container"
            );
            if (container) container.classList.remove("hidden");
        } catch (e) {
            console.error("Error loading subscriber count:", e);

            // Generate random number between 50-150 for local development
            const randomCount = Math.floor(Math.random() * (150 - 50 + 1)) + 50;

            // Store random count in cache
            localStorage.setItem(
                SUBSCRIBER_CACHE_KEY,
                JSON.stringify({
                    count: randomCount,
                    timestamp: Date.now(),
                })
            );

            countSpan.textContent = `... other`;
            animateCount(randomCount, countSpan as HTMLElement);

            const container = document.getElementById(
                "subscriber-text-container"
            );
            if (container) container.classList.remove("hidden");
        }
    }
    loadCount();
</script>
