---
// src/layouts/Layout.astro
import { ViewTransitions } from "astro:transitions";

interface Props {
	title: string;
	description: string;
	ogTitle?: string;
	ogDescription?: string;
	ogImage?: string;
	ogUrl?: string;
	twitterTitle?: string;
	twitterDescription?: string;
	twitterImage?: string;
}

const {
	title = "LatteArtist: Latte Art Progress Tracking App for iOS",
	description = "Like you, I struggled to track my latte art progress. So I'm building LatteArtist – an iOS app to log pours, visualize improvement (finally!), and ditch the photo album chaos. Shaped by feedback from home baristas.",
	ogTitle = "LatteArtist: Visualize & Improve Your Latte Art Pour by Pour (iOS)",
	ogDescription = "Trying to improve your latte art? I'm building LatteArtist to help us track pours, see progress visually, and learn from our practice. Join the journey!",
	ogImage = "https://latteartist.coffeeatpetros.com/assets/card-image.jpg", // Use absolute URL for OG/Twitter images
	ogUrl = "https://latteartist.coffeeatpetros.com/",
	twitterTitle = "LatteArtist: Visualize & Improve Your Latte Art Pour by Pour (iOS)",
	twitterDescription = "Trying to improve your latte art? I'm building LatteArtist to help us track pours, see progress visually, and learn from our practice. Join the journey!",
	twitterImage = "https://latteartist.coffeeatpetros.com/assets/card-image.webp", // Use absolute URL for OG/Twitter images
} = Astro.props;

const canonicalURL = new URL(ogUrl); // Use ogUrl as the base for canonical
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />

		<!-- SEO Meta Tags -->
		<meta name="description" content={description} />
		<meta
			name="keywords"
			content="latte art, barista, coffee, espresso, practice, tracker, ios app, latte art app"
		/>
		<title>{title}</title>

		<!-- Open Graph Meta Tags -->
		<meta property="og:title" content={ogTitle} />
		<meta property="og:description" content={ogDescription} />
		<meta property="og:image" content={ogImage} />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:type" content="website" />
		<meta property="og:site_name" content="LatteArtist" />

		<!-- Twitter Card Meta Tags -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={twitterTitle} />
		<meta name="twitter:description" content={twitterDescription} />
		<meta name="twitter:image" content={twitterImage} />
		<!-- Optional: <meta name="twitter:site" content="@YourTwitterHandle"> -->

		<!-- Canonical URL -->
		<link rel="canonical" href={canonicalURL} />

		<!-- Favicon -->
		<link
			rel="icon"
			type="image/png"
			href="/favicon-96x96.png"
			sizes="96x96"
		/>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/apple-touch-icon.png"
		/>
		<link rel="manifest" href="/site.webmanifest" />

		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Outfit:wght@100..900&display=swap"
			rel="stylesheet"
		/>

		<!-- View Transitions -->
		<ViewTransitions />

		<!-- Analytics Tracking (Loads only on non-local environments) -->
		<script is:inline>
			(function () {
				const hostname = window.location.hostname;
				const protocol = window.location.protocol;
				// Consider 'localhost', '127.0.0.1', and 'file:' protocol as local development
				const isLocal =
					hostname === "localhost" ||
					hostname === "127.0.0.1" ||
					protocol === "file:";

				// Only load analytics if NOT local
				if (!isLocal) {
					const script = document.createElement("script");
					script.defer = true;
					script.src = "https://anal.bantolas.dev/script.js";
					script.dataset.websiteId =
						"0b36ac32-65f9-4bbd-bbf3-4f7bcf9ff201";
					document.head.appendChild(script);
				} else {
					// Optional: Log a message to the console when running locally
					console.log(
						"Analytics tracking disabled for local development."
					);
				}
			})();
		</script>
	</head>
	<body>
		<div class="container">
			<slot />
			<footer>© {new Date().getFullYear()} LatteArtist</footer>
		</div>

		<!-- Main Interaction Script -->
		<script is:inline>
			// Using is:inline because this script needs access to the DOM immediately
			// and manipulates elements potentially added by other scripts (EmailOctopus).
			document.addEventListener("DOMContentLoaded", () => {
				const signupContainer =
					document.getElementById("signup-container");
				// Get the computed value of the CSS variable for dark mode text color
				const darkModeTextColor =
					getComputedStyle(document.documentElement)
						.getPropertyValue("--dark-mode-text-primary-val")
						.trim() || "#f2f2f7"; // Fallback

				if (!signupContainer) {
					console.error(
						"Signup container (#signup-container) not found for MutationObserver."
					);
					return;
				}

				const observer = new MutationObserver((mutationsList) => {
					// Check if dark mode is active *when mutation occurs*
					const isDarkMode =
						window.matchMedia &&
						window.matchMedia("(prefers-color-scheme: dark)")
							.matches;

					if (!isDarkMode) {
						return; // Only apply override in dark mode
					}

					for (const mutation of mutationsList) {
						if (mutation.type === "childList") {
							mutation.addedNodes.forEach((node) => {
								// Check if the added node itself is the success message
								if (
									node.nodeType === 1 &&
									node.classList.contains(
										"emailoctopus-success-message"
									)
								) {
									// Use setProperty with 'important' flag
									node.style.setProperty(
										"color",
										darkModeTextColor,
										"important"
									);
								}
								// Also check if the success message is a descendant of the added node
								else if (node.nodeType === 1) {
									const successMessage = node.querySelector(
										".emailoctopus-success-message"
									);
									if (successMessage) {
										// Use setProperty with 'important' flag
										successMessage.style.setProperty(
											"color",
											darkModeTextColor,
											"important"
										);
									}
								}
							});
						}
					}
				});

				// Start observing the signup container for added/removed children and subtree changes
				observer.observe(signupContainer, {
					childList: true,
					subtree: true,
				});

				// --- Android Checkbox Logic ---
				let androidCheckboxAdded = false; // Flag to prevent multiple additions

				const observerAndroid = new MutationObserver(
					(mutationsList) => {
						if (androidCheckboxAdded) {
							// observerAndroid.disconnect(); // Optional: stop observing once added
							return;
						}

						// Find the EmailOctopus hidden input
						const hiddenInput = signupContainer.querySelector(
							'input#field_3[type="hidden"]'
						);
						// Find the EmailOctopus submit input
						const submitButton = signupContainer.querySelector(
							'.emailoctopus-form input[type="submit"]'
						);
						// Find the static checkbox container and its elements
						const staticCheckboxContainer = document.getElementById(
							"android-checkbox-static-container"
						);
						const staticCustomCheckbox =
							staticCheckboxContainer?.querySelector(
								".custom-checkbox"
							);
						const staticLabel =
							staticCheckboxContainer?.querySelector(
								".android-checkbox-label"
							);

						// Check if the form elements AND the static checkbox elements are ready
						if (
							hiddenInput &&
							submitButton &&
							staticCheckboxContainer &&
							staticCustomCheckbox &&
							staticLabel &&
							!androidCheckboxAdded
						) {
							// Make the static container visible
							staticCheckboxContainer.style.display = "block";

							// Set initial value for the hidden input
							hiddenInput.value = "no";

							// Add click listener to the static label
							staticLabel.addEventListener("click", () => {
								staticCustomCheckbox.classList.toggle(
									"checked"
								);
								hiddenInput.value =
									staticCustomCheckbox.classList.contains(
										"checked"
									)
										? "yes"
										: "no";
							});

							androidCheckboxAdded = true; // Set flag
							// observerAndroid.disconnect(); // Optional: Disconnect after adding
						}
					}
				);

				// Start observing the signup container for the EmailOctopus form elements
				observerAndroid.observe(signupContainer, {
					childList: true,
					subtree: true,
				});

				// Optional: Disconnect observers when it's no longer needed, e.g., on page unload
				// window.addEventListener('unload', () => {
				// 	observer.disconnect();
				// 	observerAndroid.disconnect();
				// });
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		/* Light Mode Defaults */
		--bg-gradient-start: #fafafa; /* Softer white */
		--bg-gradient-end: #f5f5f5; /* Slightly darker soft white */
		--text-primary: #2c2c2e;
		--text-secondary: #5a5a5e;
		--card-background: #ffffff;
		--shadow-color: rgba(0, 0, 0, 0.07);
		--border-color: #e5e5e5;
		--brand-accent: #3330e4;
		--link-color: var(--brand-accent); /* Default link color */
		--link-highlight-bg: var(--brand-accent);
		--link-highlight-text: #ffffff;
		--quote-border-color: var(--border-color);
		--title-color-light: var(--brand-accent);
		--dark-mode-text-primary-val: #f2f2f7; /* Store value for JS */

		--border-radius-large: 32px; /* Increased from 16px for AirOS ExtraLarge radius */
		--spacing-unit: 1rem;

		color-scheme: light;
	}

	@media (prefers-color-scheme: dark) {
		:root {
			/* Dark Mode Overrides */
			--bg-gradient-start: #1c1c1e;
			--bg-gradient-end: #161618;
			--text-primary: var(--dark-mode-text-primary-val);
			--text-secondary: #a0a0a5;
			--card-background: #34334c; /* Lighter dark grey for better contrast */
			--shadow-color: rgba(0, 0, 0, 0.2);
			--border-color: #3a3a3c;
			--link-color: #7a78ff; /* Lighter link for dark mode */
			--link-highlight-bg: var(--brand-accent); /* Keep highlight bg */
			--link-highlight-text: #ffffff; /* White text should still work */
			--quote-border-color: var(--border-color);
			--title-color-dark: var(--text-primary);

			color-scheme: dark;
		}
	}

	body {
		margin: 0;
		padding: 0;
		font-family:
			"Outfit",
			system-ui,
			-apple-system,
			BlinkMacSystemFont,
			"Segoe UI",
			Roboto,
			Oxygen,
			Ubuntu,
			Cantarell,
			"Open Sans",
			"Helvetica Neue",
			sans-serif;
		background: linear-gradient(
			180deg,
			var(--bg-gradient-start) 0%,
			var(--bg-gradient-end) 100%
		);
		color: var(--text-primary);
		line-height: 1.6;
		display: flex;
		flex-direction: column;
		align-items: center;
		min-height: 100vh;
		padding: calc(var(--spacing-unit) * 2);
		box-sizing: border-box;
		transition:
			background-color 0.3s ease,
			color 0.3s ease;
	}

	/* Container for max-width */
	.container {
		width: 100%; /* Ensure it takes full width up to max */
		max-width: 960px; /* Apply the max-width constraint */
		margin-left: auto; /* Center the container */
		margin-right: auto; /* Center the container */
		padding-left: calc(var(--spacing-unit) * 1); /* Add some padding */
		padding-right: calc(var(--spacing-unit) * 1); /* Add some padding */
		box-sizing: border-box; /* Include padding in width calculation */
		display: flex; /* Use flexbox for internal layout */
		flex-direction: column; /* Stack children vertically */
		flex-grow: 1; /* Allow container to grow to fill space if needed */
	}

	/* Apply title color based on scheme */
	h1 {
		color: var(--title-color-light);
	}
	@media (prefers-color-scheme: dark) {
		h1 {
			color: var(--title-color-dark);
		}
	}

	footer {
		margin-top: auto;
		padding-top: calc(var(--spacing-unit) * 2);
		font-size: 0.9em;
		color: var(--text-secondary);
		text-align: center;
		width: 100%;
		border-top: 1px solid var(--border-color);
		transition: border-color 0.3s ease;
	}

	/* General Card Styling Base */
	.card-container {
		background-color: var(--card-background);
		padding: calc(var(--spacing-unit) * 2); /* Consistent padding */
		border-radius: var(--border-radius-large);
		box-shadow: 0 4px 15px var(--shadow-color); /* Consistent shadow */
		transition:
			background-color 0.3s ease,
			box-shadow 0.3s ease;
		width: 100%;
		box-sizing: border-box;
		border: 1px solid var(--border-color); /* Subtle stroke */
	}

	/* Responsive adjustments for layout */
	@media (max-width: 768px) {
		h1 {
			font-size: 2.4em; /* Adjusted in global as h1 is likely consistent */
		}
		/* Adjustments for main content flex direction will be handled in the page/component */
	}

	/* Sharpie Highlight Utility */
	.sharpie-highlight {
		/* Use brand accent with transparency */
		background-color: rgba(
			51,
			48,
			228,
			0.3
		); /* --brand-accent (#3330e4) with 30% alpha */
		padding: 0.1em 0.3em;
		margin: 0 0.1em;
		border-radius: 3px;
		box-decoration-break: clone;
		-webkit-box-decoration-break: clone;
		font-weight: 500;
		color: var(--text-primary); /* Ensure contrast */
	}
</style>
